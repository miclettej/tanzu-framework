import { Inject, Injectable, Optional } from '@angular/core';
import { tap } from 'rxjs/operators';
import { USE_DOMAIN, USE_HTTP_OPTIONS, APIClient } from './api-client.service';
import * as guards from './guards';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
/**
 * Created with https://github.com/flowup/api-client-generator
 */
export class GuardedAPIClient extends APIClient {
    constructor(httpClient, domain, options) {
        super(httpClient, domain, options);
        this.httpClient = httpClient;
    }
    getUI(requestHttpOptions) {
        return super.getUI(requestHttpOptions)
            .pipe(tap((res) => guards.isFile(res) || console.error(`TypeGuard for response 'File' caught inconsistency.`, res)));
    }
    getUIFile(args, requestHttpOptions) {
        return super.getUIFile(args, requestHttpOptions)
            .pipe(tap((res) => guards.isFile(res) || console.error(`TypeGuard for response 'File' caught inconsistency.`, res)));
    }
    getFeatureFlags(requestHttpOptions) {
        return super.getFeatureFlags(requestHttpOptions)
            .pipe(tap((res) => guards.isFeatures(res) || console.error(`TypeGuard for response 'Features' caught inconsistency.`, res)));
    }
    getTanzuEdition(requestHttpOptions) {
        return super.getTanzuEdition(requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    verifyLdapConnect(args, requestHttpOptions) {
        return super.verifyLdapConnect(args, requestHttpOptions)
            .pipe(tap((res) => guards.isLdapTestResult(res) || console.error(`TypeGuard for response 'LdapTestResult' caught inconsistency.`, res)));
    }
    verifyLdapBind(requestHttpOptions) {
        return super.verifyLdapBind(requestHttpOptions)
            .pipe(tap((res) => guards.isLdapTestResult(res) || console.error(`TypeGuard for response 'LdapTestResult' caught inconsistency.`, res)));
    }
    verifyLdapUserSearch(requestHttpOptions) {
        return super.verifyLdapUserSearch(requestHttpOptions)
            .pipe(tap((res) => guards.isLdapTestResult(res) || console.error(`TypeGuard for response 'LdapTestResult' caught inconsistency.`, res)));
    }
    verifyLdapGroupSearch(requestHttpOptions) {
        return super.verifyLdapGroupSearch(requestHttpOptions)
            .pipe(tap((res) => guards.isLdapTestResult(res) || console.error(`TypeGuard for response 'LdapTestResult' caught inconsistency.`, res)));
    }
    getAviClouds(requestHttpOptions) {
        return super.getAviClouds(requestHttpOptions)
            .pipe(tap((res) => guards.isAviCloud(res) || console.error(`TypeGuard for response 'AviCloud' caught inconsistency.`, res)));
    }
    getAviServiceEngineGroups(requestHttpOptions) {
        return super.getAviServiceEngineGroups(requestHttpOptions)
            .pipe(tap((res) => guards.isAviServiceEngineGroup(res) || console.error(`TypeGuard for response 'AviServiceEngineGroup' caught inconsistency.`, res)));
    }
    getAviVipNetworks(requestHttpOptions) {
        return super.getAviVipNetworks(requestHttpOptions)
            .pipe(tap((res) => guards.isAviVipNetwork(res) || console.error(`TypeGuard for response 'AviVipNetwork' caught inconsistency.`, res)));
    }
    getProvider(requestHttpOptions) {
        return super.getProvider(requestHttpOptions)
            .pipe(tap((res) => guards.isProviderInfo(res) || console.error(`TypeGuard for response 'ProviderInfo' caught inconsistency.`, res)));
    }
    getVsphereThumbprint(args, requestHttpOptions) {
        return super.getVsphereThumbprint(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereThumbprint(res) || console.error(`TypeGuard for response 'VSphereThumbprint' caught inconsistency.`, res)));
    }
    setVSphereEndpoint(args, requestHttpOptions) {
        return super.setVSphereEndpoint(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVsphereInfo(res) || console.error(`TypeGuard for response 'VsphereInfo' caught inconsistency.`, res)));
    }
    getVSphereDatacenters(requestHttpOptions) {
        return super.getVSphereDatacenters(requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereDatacenter(res) || console.error(`TypeGuard for response 'VSphereDatacenter' caught inconsistency.`, res)));
    }
    getVSphereDatastores(args, requestHttpOptions) {
        return super.getVSphereDatastores(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereDatastore(res) || console.error(`TypeGuard for response 'VSphereDatastore' caught inconsistency.`, res)));
    }
    getVSphereFolders(args, requestHttpOptions) {
        return super.getVSphereFolders(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereFolder(res) || console.error(`TypeGuard for response 'VSphereFolder' caught inconsistency.`, res)));
    }
    getVSphereComputeResources(args, requestHttpOptions) {
        return super.getVSphereComputeResources(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereManagementObject(res) || console.error(`TypeGuard for response 'VSphereManagementObject' caught inconsistency.`, res)));
    }
    getVSphereResourcePools(args, requestHttpOptions) {
        return super.getVSphereResourcePools(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereResourcePool(res) || console.error(`TypeGuard for response 'VSphereResourcePool' caught inconsistency.`, res)));
    }
    getVSphereNetworks(args, requestHttpOptions) {
        return super.getVSphereNetworks(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereNetwork(res) || console.error(`TypeGuard for response 'VSphereNetwork' caught inconsistency.`, res)));
    }
    getVSphereNodeTypes(requestHttpOptions) {
        return super.getVSphereNodeTypes(requestHttpOptions)
            .pipe(tap((res) => guards.isNodeType(res) || console.error(`TypeGuard for response 'NodeType' caught inconsistency.`, res)));
    }
    getVSphereOSImages(args, requestHttpOptions) {
        return super.getVSphereOSImages(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVSphereVirtualMachine(res) || console.error(`TypeGuard for response 'VSphereVirtualMachine' caught inconsistency.`, res)));
    }
    exportTKGConfigForVsphere(args, requestHttpOptions) {
        return super.exportTKGConfigForVsphere(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    applyTKGConfigForVsphere(args, requestHttpOptions) {
        return super.applyTKGConfigForVsphere(args, requestHttpOptions)
            .pipe(tap((res) => guards.isConfigFileInfo(res) || console.error(`TypeGuard for response 'ConfigFileInfo' caught inconsistency.`, res)));
    }
    importTKGConfigForVsphere(args, requestHttpOptions) {
        return super.importTKGConfigForVsphere(args, requestHttpOptions)
            .pipe(tap((res) => guards.isVsphereRegionalClusterParams(res) || console.error(`TypeGuard for response 'VsphereRegionalClusterParams' caught inconsistency.`, res)));
    }
    createVSphereRegionalCluster(args, requestHttpOptions) {
        return super.createVSphereRegionalCluster(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getVPCs(requestHttpOptions) {
        return super.getVPCs(requestHttpOptions)
            .pipe(tap((res) => guards.isVpc(res) || console.error(`TypeGuard for response 'Vpc' caught inconsistency.`, res)));
    }
    getAWSNodeTypes(args, requestHttpOptions) {
        return super.getAWSNodeTypes(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getAWSRegions(requestHttpOptions) {
        return super.getAWSRegions(requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getAWSOSImages(args, requestHttpOptions) {
        return super.getAWSOSImages(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAWSVirtualMachine(res) || console.error(`TypeGuard for response 'AWSVirtualMachine' caught inconsistency.`, res)));
    }
    getAWSCredentialProfiles(requestHttpOptions) {
        return super.getAWSCredentialProfiles(requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getAWSAvailabilityZones(requestHttpOptions) {
        return super.getAWSAvailabilityZones(requestHttpOptions)
            .pipe(tap((res) => guards.isAWSAvailabilityZone(res) || console.error(`TypeGuard for response 'AWSAvailabilityZone' caught inconsistency.`, res)));
    }
    getAWSSubnets(args, requestHttpOptions) {
        return super.getAWSSubnets(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAWSSubnet(res) || console.error(`TypeGuard for response 'AWSSubnet' caught inconsistency.`, res)));
    }
    exportTKGConfigForAWS(args, requestHttpOptions) {
        return super.exportTKGConfigForAWS(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    applyTKGConfigForAWS(args, requestHttpOptions) {
        return super.applyTKGConfigForAWS(args, requestHttpOptions)
            .pipe(tap((res) => guards.isConfigFileInfo(res) || console.error(`TypeGuard for response 'ConfigFileInfo' caught inconsistency.`, res)));
    }
    createAWSRegionalCluster(args, requestHttpOptions) {
        return super.createAWSRegionalCluster(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    importTKGConfigForAWS(args, requestHttpOptions) {
        return super.importTKGConfigForAWS(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAWSRegionalClusterParams(res) || console.error(`TypeGuard for response 'AWSRegionalClusterParams' caught inconsistency.`, res)));
    }
    getAzureEndpoint(requestHttpOptions) {
        return super.getAzureEndpoint(requestHttpOptions)
            .pipe(tap((res) => guards.isAzureAccountParams(res) || console.error(`TypeGuard for response 'AzureAccountParams' caught inconsistency.`, res)));
    }
    getAzureResourceGroups(args, requestHttpOptions) {
        return super.getAzureResourceGroups(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAzureResourceGroup(res) || console.error(`TypeGuard for response 'AzureResourceGroup' caught inconsistency.`, res)));
    }
    createAzureResourceGroup(args, requestHttpOptions) {
        return super.createAzureResourceGroup(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getAzureVnets(args, requestHttpOptions) {
        return super.getAzureVnets(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAzureVirtualNetwork(res) || console.error(`TypeGuard for response 'AzureVirtualNetwork' caught inconsistency.`, res)));
    }
    createAzureVirtualNetwork(args, requestHttpOptions) {
        return super.createAzureVirtualNetwork(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    getAzureOSImages(requestHttpOptions) {
        return super.getAzureOSImages(requestHttpOptions)
            .pipe(tap((res) => guards.isAzureVirtualMachine(res) || console.error(`TypeGuard for response 'AzureVirtualMachine' caught inconsistency.`, res)));
    }
    getAzureRegions(requestHttpOptions) {
        return super.getAzureRegions(requestHttpOptions)
            .pipe(tap((res) => guards.isAzureLocation(res) || console.error(`TypeGuard for response 'AzureLocation' caught inconsistency.`, res)));
    }
    getAzureInstanceTypes(args, requestHttpOptions) {
        return super.getAzureInstanceTypes(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAzureInstanceType(res) || console.error(`TypeGuard for response 'AzureInstanceType' caught inconsistency.`, res)));
    }
    exportTKGConfigForAzure(args, requestHttpOptions) {
        return super.exportTKGConfigForAzure(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    applyTKGConfigForAzure(args, requestHttpOptions) {
        return super.applyTKGConfigForAzure(args, requestHttpOptions)
            .pipe(tap((res) => guards.isConfigFileInfo(res) || console.error(`TypeGuard for response 'ConfigFileInfo' caught inconsistency.`, res)));
    }
    createAzureRegionalCluster(args, requestHttpOptions) {
        return super.createAzureRegionalCluster(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    importTKGConfigForAzure(args, requestHttpOptions) {
        return super.importTKGConfigForAzure(args, requestHttpOptions)
            .pipe(tap((res) => guards.isAzureRegionalClusterParams(res) || console.error(`TypeGuard for response 'AzureRegionalClusterParams' caught inconsistency.`, res)));
    }
    checkIfDockerDaemonAvailable(requestHttpOptions) {
        return super.checkIfDockerDaemonAvailable(requestHttpOptions)
            .pipe(tap((res) => guards.isDockerDaemonStatus(res) || console.error(`TypeGuard for response 'DockerDaemonStatus' caught inconsistency.`, res)));
    }
    exportTKGConfigForDocker(args, requestHttpOptions) {
        return super.exportTKGConfigForDocker(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    applyTKGConfigForDocker(args, requestHttpOptions) {
        return super.applyTKGConfigForDocker(args, requestHttpOptions)
            .pipe(tap((res) => guards.isConfigFileInfo(res) || console.error(`TypeGuard for response 'ConfigFileInfo' caught inconsistency.`, res)));
    }
    createDockerRegionalCluster(args, requestHttpOptions) {
        return super.createDockerRegionalCluster(args, requestHttpOptions)
            .pipe(tap((res) => typeof res === 'string' || console.error(`TypeGuard for response 'string' caught inconsistency.`, res)));
    }
    importTKGConfigForDocker(args, requestHttpOptions) {
        return super.importTKGConfigForDocker(args, requestHttpOptions)
            .pipe(tap((res) => guards.isDockerRegionalClusterParams(res) || console.error(`TypeGuard for response 'DockerRegionalClusterParams' caught inconsistency.`, res)));
    }
}
GuardedAPIClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GuardedAPIClient, deps: [{ token: i1.HttpClient }, { token: USE_DOMAIN, optional: true }, { token: USE_HTTP_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
GuardedAPIClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GuardedAPIClient });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: GuardedAPIClient, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USE_DOMAIN]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USE_HTTP_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,